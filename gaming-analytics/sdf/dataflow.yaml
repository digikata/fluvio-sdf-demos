apiVersion: 0.5.0
meta:
  name: gaming-analytics
  version: 0.1.0
  namespace: examples
config:
  converter: json
  consumer:
    default_starting_offset:
      value: 0
      position: End

types:
  player-event-parameters:
    type: object
    properties:
      player_id:
        type: string
      session_id:
        type: string
      event_type:
        type: string
      level_id:
        type: string
      map_id:
        type: string

  user-data:
    type: object
    properties:
      user_id:
        type: string
      platform:
        type: string

  player-event:
    type: object
    properties:
      event_name:
        type: string
      parameters:
        type: player-event-parameters
      event_timestamp:
        type: string
      user_data:
        type: user-data

  player-session-summary:
    type: object
    properties:
      player_id:
        type: string
      event_count:
        type: u32

  events-count:
    type: list
    items:
      type: player-session-summary

  purchase-event-parameters:
    type: object
    properties:
      transaction_id:
        type: string
      transaction_type:
        type: string
      currency:
        type: string
      amount:
        type: f64
      item_id:
        type: string
      item_type:
        type: string

  purchase-event:
    type: object
    properties:
      event_name:
        type: string
      parameters:
        type: purchase-event-parameters
      event_timestamp:
        type: string
      user_data:
        type: user-data

  item-purchase-list:
    type: list
    items:
      type: item-purchase-total

  item-purchase-total:
    type: object
    properties:
      item_id:
        type: string
      total_amount:
        type: f64

topics:
  player-events:
    schema:
      value:
        type: player-event

  player-session-summaries:
    schema:
      value:
        type: events-count

  purchase-events:
    schema:
      value:
        type: purchase-event

  purchase-summaries:
    schema:
      value:
        type: item-purchase-list

services:
  # Monitor player sessions
  player-session-analytics:
    sources:
      - type: topic
        id: player-events

    states:
      events-per-user:
        type: keyed-state
        properties:
          key:
            type: string
          value:
            type: arrow-row
            properties:
              count:
                type: u32

    window:
      tumbling:
        duration: 5s

      assign-timestamp:
        # Instruct the engine to apply the timestamp from the event metadata for the watermark operator
        run: |
          fn assign_event_timestamp(_value: PlayerEvent, event_time: i64) -> Result<i64> {
            Ok(event_time)
          }

      partition:
        # Assign a partition key to divide the data set for the update operation
        assign-key:
          run: |
            fn assign_event_key(event: PlayerEvent) -> Result<String> {
              Ok(event.user_data.user_id)
            }

        update-state:
          # Retrieve state by key and increment by 1.
          run: |
            fn increment_event_count(_event: PlayerEvent) -> Result<()> {
              let mut state = events_per_user();
              state.count += 1;
              state.update();
              Ok(())
            }

      flush:
        # Read the full state and compute the top 3 words sorted by count.
        run: |
          fn compute_user_events() -> Result<EventsCount> {
            let events_count = events_per_user();

            let users = events_count.sql("select * from events_per_user order by count")?;
            let rows = users.rows()?;
            let mut user_events = vec![];
            let key = users.key()?;
            let count_value = users.col("count")?;
            while rows.next() {
              let user_id = rows.str(&key)?;
              let count = rows.u32(&count_value)?;
              user_events.push(PlayerSessionSummary {player_id: user_id, event_count: count});
            }
            Ok(user_events)
          }

    sinks:
      - type: topic
        id: player-session-summaries

  purchase-analytics:
    sources:
      - type: topic
        id: purchase-events

    states:
      purchase-per-item:
        type: keyed-state
        properties:
          key:
            type: string
          value:
            type: arrow-row
            properties:
              total_amount:
                type: f64

    window:
      tumbling:
        duration: 10s

      assign-timestamp:
        run: |
          fn assign_purchase_timestamp(_event: PurchaseEvent, event_time: i64) -> Result<i64> {
            Ok(event_time)
          }

      partition:
        assign-key:
          run: |
            fn assign_purchase_key(event: PurchaseEvent) -> Result<String> {
              Ok(event.parameters.item_id)
            }

        update-state:
          run: |
            fn update_purchase_amount(event: PurchaseEvent) -> Result<()> {
              let mut state = purchase_per_item();
              state.total_amount += event.parameters.amount;
              state.update();
              Ok(())
            }

      flush:
        run: |
          fn compute_purchase_summaries() -> Result<ItemPurchaseList> {
            let purchase_count = purchase_per_item();

            let items = purchase_count.sql("select * from purchase_per_item order by total_amount")?;
            let rows = items.rows()?;
            let mut purchase_summaries = vec![];
            let key = items.key()?;
            let amount_value = items.col("total_amount")?;
            while rows.next() {
              let item_id = rows.str(&key)?;
              let total_amount = rows.f64(&amount_value)?;
              purchase_summaries.push(ItemPurchaseTotal { item_id, total_amount });
            }
            Ok(purchase_summaries)
          }

    sinks:
      - type: topic
        id: purchase-summaries
