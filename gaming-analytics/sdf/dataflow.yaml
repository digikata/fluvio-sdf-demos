apiVersion: 0.5.0
meta:
  name: gaming-analytics
  version: 0.1.0
  namespace: gaming

config:
  converter: json
  consumer:
    default_starting_offset:
      value: 0
      position: End

types:
  player-event:
    type: object
    properties:
      event_name:
        type: string
      parameters:
        type: object
        properties:
          player_id:
            type: string
          session_id:
            type: string
          event_type:
            type: string
          level_id:
            type: string
          map_id:
            type: string
      event_timestamp:
        type: string
      user_data:
        type: object
        properties:
          user_id:
            type: string
          platform:
            type: string
  purchase-event:
    type: object
    properties:
      event_name:
        type: string
      parameters:
        type: object
        properties:
          transaction_id:
            type: string
          transaction_type:
            type: string
          currency:
            type: string
          amount:
            type: f64
          item_id:
            type: string
          item_type:
            type: string
      event_timestamp:
        type: string
      user_data:
        type: object
        properties:
          user_id:
            type: string
          platform:
            type: string
  server-metric:
    type: object
    properties:
      event_name:
        type: string
      parameters:
        type: object
        properties:
          server_id:
            type: string
          cpu_load:
            type: u32
          memory_usage:
            type: u32
          latency:
            type: u32
      event_timestamp:
        type: string
      server_data:
        type: object
        properties:
          region:
            type: string
          server_type:
            type: string
  aggregated-engagement:
    type: object
    properties:
      level_id:
        type: string
      map_id:
        type: string
      active_players:
        type: u32
      avg_session_duration:
        type: f64
  fraud-flag:
    type: object
    properties:
      user_id:
        type: string
      ip_address:
        type: string
      suspicious_purchase_count:
        type: u32
  server-health:
    type: object
    properties:
      server_id:
        type: string
      cpu_load:
        type: u32
      latency:
        type: u32
      timestamp:
        type: string

topics:
  player-events:
    schema:
      value:
        type: player-event
  purchase-events:
    schema:
      value:
        type: purchase-event
  server-metrics:
    schema:
      value:
        type: server-metric
  engagement-metrics:
    schema:
      value:
        type: aggregated-engagement
  fraud-detections:
    schema:
      value:
        type: fraud-flag
  server-health-metrics:
    schema:
      value:
        type: server-health

services:
  # Track Player Engagement and Retention
  track-engagement:
    sources:
      - type: topic
        id: player-events
    states:
      session-durations:
        type: keyed-state
        properties:
          key:
            type: string
          value:
            type: f64
    window:
      tumbling:
        duration: 30s
      assign-timestamp:
        run: |
          fn assign_event_timestamp(event: PlayerEvent, event_time: i64) -> Result<i64> {
            Ok(event_time)
          }
      partition:
        assign-key:
          run: |
            fn key_by_level_map(event: PlayerEvent) -> Result<String> {
              Ok(format!("{}_{}", event.parameters.level_id, event.parameters.map_id))
            }
        update-state:
          run: |
            fn update_session_duration(event: PlayerEvent) -> Result<()> {
              session_durations().insert(event.parameters.player_id.clone(), 30.0);  // Placeholder duration
              Ok(())
            }
      flush:
        run: |
          fn get_engagement_metrics() -> Result<AggregatedEngagement> {
            let level_id = "level_01";
            let map_id = "map_05";
            let active_players = session_durations().len() as u32;
            let avg_session_duration = 30.0;  // Placeholder
            Ok(AggregatedEngagement {
              level_id: level_id.to_string(),
              map_id: map_id.to_string(),
              active_players,
              avg_session_duration
            })
          }
    sinks:
      - type: topic
        id: engagement-metrics

  # Purchase Fraud Detection
  detect-fraud:
    sources:
      - type: topic
        id: purchase-events
    states:
      fraud-check:
        type: keyed-state
        properties:
          key:
            type: string
          value:
            type: u32
    transforms:
      - operator: map
        run: |
          fn check_fraud(event: PurchaseEvent) -> Result<Option<FraudFlag>> {
            let suspicious_count = fraud_check().get(&event.user_data.user_id).unwrap_or(0);
            if suspicious_count > 3 {  // Example rule: 3 purchases in a minute
              Ok(Some(FraudFlag {
                user_id: event.user_data.user_id.clone(),
                ip_address: event.parameters.ip_address.clone(),
                suspicious_purchase_count: suspicious_count
              }))
            } else {
              fraud_check().insert(event.user_data.user_id.clone(), suspicious_count + 1);
              Ok(None)
            }
          }
    sinks:
      - type: topic
        id: fraud-detections

  # Monitor Server Health Metrics
  monitor-server-health:
    sources:
      - type: topic
        id: server-metrics
    transforms:
      - operator: filter-map
        run: |
          fn monitor_server(event: ServerMetric) -> Result<Option<ServerHealth>> {
            if event.parameters.cpu_load > 80 || event.parameters.latency > 100 {  // Example thresholds
              Ok(Some(ServerHealth {
                server_id: event.parameters.server_id.clone(),
                cpu_load: event.parameters.cpu_load,
                latency: event.parameters.latency,
                timestamp: event.event_timestamp.clone(),
              }))
            } else {
              Ok(None)
            }
          }
    sinks:
      - type: topic
        id: server-health-metrics
